{
  "name": "dbgeo",
  "version": "0.0.3",
  "description": "A Node.js module for converting database queries to GeoJSON and TopoJSON",
  "keywords": [
    "TopoJSON",
    "GeoJSON",
    "PostGIS",
    "MySQL",
    "Postgres",
    "PostgreSQL",
    "WKT",
    "MariaDB",
    "dbgeo",
    "geometry",
    "GIS",
    "mysql2geojson",
    "postgeo"
  ],
  "main": "./dbgeo",
  "repository": {
    "type": "git",
    "url": "https://github.com/jczaplew/dbgeo.git"
  },
  "author": {
    "name": "John J Czaplewski"
  },
  "license": "CC0",
  "dependencies": {
    "async": "~0.9.0",
    "topojson": "~1.6.14",
    "wellknown": "~0.2.0"
  },
  "readme": "# dbgeo\n\nConvert database query results to GeoJSON or TopoJSON. Inspired by [Bryan McBride's](https://github.com/bmcbride) [PHP-Database-GeoJSON](https://github.com/bmcbride/PHP-Database-GeoJSON). Works with your database of choice - ideally paired with [node-mysql](https://github.com/felixge/node-mysql) or [node-postgres](https://github.com/brianc/node-postgres). A more flexible version of [postgeo](https://github.com/jczaplew/postgeo) and [mysql2geojson](https://github.com/jczaplew/mysql2geojson).\n\n###### Installation\n````npm install dbgeo````\n\n###### Example Usage\n````\nvar dbgeo = require(\"dbgeo\");\n\n// Query a database...\n\ndbgeo.parse({\n  \"data\": data,\n  \"outputFormat\": \"geojson\",\n  \"geometryColumn\": \"geom\",\n  \"geometryType\": \"wkt\"\n  \"callback\": function(error, result) {\n    if (error) {\n       console.log(error);\n    } else {\n      // This will log a valid GeoJSON object\n      console.log(result)\n    }   \n  }\n});\n\n````\n\n## API\n\n### .parse({ params })\n````params```` is an object that contains the following keys:\n\n+ ````data```` (***required***) - Results from a query. Should be an array of objects.\n+ ````geometryType```` - Format of input geometry. Can be \"wkt\", \"geojson\", or \"ll\". \"Default is \"geojson\".\n+ ````geometryColumn```` - Name of column that contains geometry. If input geometry type is \"ll\", this is an array in the format ````[\"latitude\", \"longitude\"]````. Default value is \"geometry\".\n+ ````outputFormat```` - Can be either \"geojson\" or \"topojson\". Default value is \"geojson\".\n+ ````callback```` (***required***) - A function with two parameters: an error, and a result object.\n\nExamples can be found in ````test/test.js````.\n\n### .defaults{}\nThe default parameters for ````.parse()````. You can set these before using ````.parse()```` if you plan to use the same options continuously.\n\n## License\nCC0\n",
  "readmeFilename": "README.md",
  "_id": "dbgeo@0.0.3",
  "dist": {
    "shasum": "b04ba3bc724911f3419465a0d06fb9bbbb650dbe"
  },
  "_from": "dbgeo@",
  "_resolved": "https://registry.npmjs.org/dbgeo/-/dbgeo-0.0.3.tgz"
}
